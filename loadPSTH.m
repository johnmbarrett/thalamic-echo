function [psth,params,cpsth,tpsth,mpsth] = loadPSTH(folder,suppressArtifact)
%LOADPSTH   Load a PSTH generated by Xiaojian's in-vivo LSPS rig
%   PSTH = LOADPSTH loads a peristimulus time histogram from the file
%   Par_PSTH.m in the current folder. PSTH is an NxMx32xPxQ matrix where N
%   is the number of bins, M the number of trials, P the number of probes,
%   and Q the number of unique stimulus location and parameter combos. Non
%   32-channel probes are not currently supported.
%
%   PSTH = LOADPSTH(FOLDER) loads it from the folder specified by FOLDER
%   instead.
%
%   PSTH = LOADPSTH([FOLDER,]true) performs rudimentary artifact
%   suppression by interpolating out the values in the 102nd and the (102 +
%   laser pulse width)th bins
%
%   [PSTH,PARAMS,CPSTH,TPSTH,MSDF] = LOADPSTH(___) additionally loads the
%   stimulus parameter table PARAMS, the channel-average histogram CPSTH, 
%   the trial-average histogram TPSTH, and the grand average histogram MSDF

%   Written by John Barrett 2018-06-28 16:00 CDT
%   Last updated John Barrett 2018-06-28 17:47 CDT

    if nargin < 1 || islogical(folder)
        if islogical(folder)
            suppressArtifact = folder;
        end
        
        folder = pwd;
    elseif nargin < 2
        suppressArtifact = false;
    end
    
    cd(folder);
    
    if ~exist('./Par_PSTH.mat','file')
        error('There''s no PSTH in this folder.');
    end
    
    load('./Par_PSTH.mat','Par_PSTH');
    
    params = vertcat(Par_PSTH{:,1}); %#ok<NODEF,IDISVAR>
    
    assert(size(params,2) == 4,'I don''t understand the parameters.'); % TODO : 7 column parameters
    
    params = table(params(:,1),params(:,2),params(:,4),params(:,3),'VariableNames',{'PulseWidth','PercentPower','X','Y'});
    
    % TODO : non struct format
    sizes = unique(cell2mat(cellfun(@(p) size(p.PSTH),Par_PSTH(:,2),'UniformOutput',false)),'rows');
    
    assert(min(sizes(:,1) == max(sizes(:,1))),'PSTHs must be the same size apart from number of trials.');
    assert(min(sizes(:,3) == max(sizes(:,3))),'PSTHs must be the same size apart from number of trials.');
    minTrials = min(sizes(:,2));
    
    psth = cell2mat(cellfun(@(p) p.PSTH(:,1:minTrials,:),reshape(Par_PSTH(:,2),1,1,1,size(Par_PSTH,1)),'UniformOutput',false));
    
    psth = reshape(psth,size(psth,1),minTrials,32,[],size(psth,4)); % TODO : non 32-channel probes
    
    if suppressArtifact
        pws = unique(params.PulseWidth);
        badBins = arrayfun(@(pw) 100+repmat(0:3,1,2)+kron([0 pw],ones(1,4)),pws,'UniformOutput',false);
        
        for ii = 1:numel(pws)
            pwIndex = params.PulseWidth == pws(ii);
            psth(badBins{ii},:,:,:,pwIndex) = nan;
        end
    end
    
    if nargout < 3
        return
    end
    
    cpsth = squeeze(nanmean(psth,3));
    
    if suppressArtifact
        for ii = 1:numel(pws)
            pwIndex = params.PulseWidth == pws(ii);
            goodBins = setdiff(1:size(psth,1),badBins{ii});
            cpsth(badBins{ii},:,:,pwIndex) = interp1(goodBins,cpsth(goodBins,:,:,pwIndex),badBins{ii});
        end
    end
    
    if nargout < 4
        return
    end
    
    tpsth = squeeze(nanmean(psth,2));
    
    if nargout == 5
        mpsth = squeeze(nanmean(cpsth,2));
    end
end